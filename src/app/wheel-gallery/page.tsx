"use client";
import React, { useState, useRef, useEffect, useCallback } from "react";
import Link from "next/link";
import styles from "./WheelGallery.module.css";
import { useRouter, useSearchParams } from "next/navigation";
import Gallery from "../_components/Wheel Gallery/Gallery/Gallery";

import { paginatedFetch, getUniqueElements } from "./actions";

import SubmitModal from "../_components/Wheel Gallery/SubmitModal/SubmitModal";

import CheckboxSection from "../_components/Wheel Gallery/CheckboxSection/CheckboxSection";
import PreviewModal from "../_components/Wheel Gallery/PreviewModal/PreviewModal";

// wheelBrands needs to be generated by a GET request from the server.
// if table category for brand has 2 or more items listed below it, it should be added to array.

interface Options {
  wheel_size: number[];
  wheel_brand: string[];
  car_type: string[];
}

export default function WheelGallery() {
  // ---------------------------------------- //
  //            VARIABLE DECLARATION          //
  // ---------------------------------------- //
  const searchParams = useSearchParams();
  const router = useRouter();
  const galleryRef = useRef(null);

  // for handling the PreviewModal and AboutModal
  const [activeModal, setActiveModal] = useState("");
  const [clickedPhotoData, setClickedPhotoData] = useState({});

  const [images, setImages] = useState<object[]>([]);
  const [wheelBrands, setWheelBrands] = useState([]);
  const [wheelSizes, setWheelSizes] = useState([]);
  const [carTypes, setCarTypes] = useState([]);

  // for handling the gallery state
  const [currentPage, setPage] = useState(0);
  const [waitingForImages, setLoading] = useState(false);

  const [scrollPosition, setScrollPosition] = useState(0);

  const fullOptions = {
    car_type: carTypes,
    wheel_size: wheelSizes,
    wheel_brand: wheelBrands,
  };

  const [checkedOptions, setCheckedOptions] = useState<Options>({
    car_type: [],
    wheel_size: [],
    wheel_brand: [],
  });

  // ---------------------------------------- //
  //               EVENT HANDLERS             //
  // ---------------------------------------- //

  function handleImageClick(imageData) {
    setClickedPhotoData(imageData);
    setActiveModal("preview");
  }

  const closeModal = useCallback(() => {
    setActiveModal("");
  }, []);

  const copyUrl = useCallback(() => {
    const url = window.location.href;
    navigator.clipboard
      .writeText(url)
      .then(() => alert("URL copied to clipboard!"))
      .catch((err) => console.error("Failed to copy:", err));
  }, []);

  function clearOptions() {
    setCheckedOptions({ car_type: [], wheel_size: [], wheel_brand: [] });
  }

  async function toggleOption(category: keyof Options, value: string) {
    setCheckedOptions((previousOptions) => {
      const categoryOptions = previousOptions[category];
      const updatedCategoryOptions = categoryOptions.includes(value)
        ? categoryOptions.filter((option) => option !== value)
        : [...categoryOptions, value];
      return {
        ...previousOptions,
        [category]: updatedCategoryOptions,
      };
    });
  }

  async function loadMoreData() {
    setLoading(true);
    paginatedFetch({
      filters: checkedOptions,
      numItems: 25,
      page: currentPage + 1,
    }).then((data) => {
      setImages((prevImages) => [...prevImages, ...data]);
      if (data.length > 0) {
        setPage(currentPage + 1);
      }
      setLoading(false);
    });
  }

  async function onScroll() {
    if (
      galleryRef.current.scrollTop + galleryRef.current.offsetHeight + 5 >=
        galleryRef.current.scrollHeight &&
      !waitingForImages
    ) {
      if (images.length % 25 !== 0) {
        return console.log("no more images to load");
      }
      await loadMoreData();
    }
  }

  // ---------------------------------------- //
  //                   HOOKS                  //
  // ---------------------------------------- //

  // reads URL and sets state of checkedOptions array
  useEffect(function readQueryOnLoad() {
    const parsedOptions: Options = {
      car_type: [],
      wheel_size: [],
      wheel_brand: [],
    };
    searchParams.forEach((value, key) => {
      let valuesArray = value.split(",").filter(Boolean);
      if (key in parsedOptions) {
        if(key === "wheel_size"){
          let tempArray = []
          valuesArray.map((size) => {
            tempArray.push(parseInt(size));
          })
          parsedOptions[key as keyof Options] = tempArray;
        }
        else{
          parsedOptions[key as keyof Options] = valuesArray;
        }
      }
    });
    setCheckedOptions(parsedOptions);
  }, []);

  {
    /* whenever checkedOptions changes, the URL changes. this is for events
    after initial read of the site, so the last useEffect still has to exist */
  }

  useEffect(
    function setQueryOnChange() {
      const queryParameters = Object.entries(checkedOptions)
        .map(([category, values]) => {
          const queryString = values.join(",");
          return values.length > 0 ? `${category}=${queryString}` : "";
        })
        .filter(Boolean)
        .join("&");
      router.push(`?${queryParameters}`);
      setImages([]);
      paginatedFetch({
        filters: checkedOptions,
        numItems: 25,
        page: 0,
      }).then((data) => {
        setImages(data);
      });
    },
    [checkedOptions],
  );

  // sets the items in the filter options based on what is available,
  // ensuring that no 1D query will result in null

  useEffect(
    function setOptions() {
      getUniqueElements("wheel_size").then((res) => {
        setWheelSizes(res);
      });
      getUniqueElements("wheel_brand").then((res) => {
        setWheelBrands(res);
      });
      getUniqueElements("car_type").then((res) => {
        setCarTypes(res);
      });
    },
    [checkedOptions],
  );

  // triggers onScroll to occur when the user reaches the end of the gallery field

  useEffect(() => {
    galleryRef.current.addEventListener("scroll", onScroll);
    return () => {
      if (galleryRef.current) {
        galleryRef.current.removeEventListener("scroll", onScroll);
      }
    };
  }, [galleryRef, onScroll, currentPage]);

  // ---------------------------------------- //
  //             COMPONENT RETURN             //
  // ---------------------------------------- //

  return (
    <div className={styles["page"]}>
      <header className={styles["header"]}>
        <h1 className={styles["header__title"]}>wheel gallery.</h1>
        <div
          onClick={() => {
            setActiveModal("submit");
          }}
          className={styles["header__submit-modal-trigger"]}
          id="submit-modal-trigger"
        >
          submit a wheel
        </div>
        <Link className={styles["header__logo"]} href="/">
          <div className={styles["logo__big-rhombus"]} id="big-rhombus"></div>
          <div
            className={styles["logo__small-rhombus-1"]}
            id="small-rhombus-1"
          ></div>
          <div
            className={styles["logo__small-rhombus-2"]}
            id="small-rhombus-2"
          ></div>
          <p className={styles["header__back"]}>back to 20vt.help</p>
        </Link>
      </header>
      <main className={styles["main"]}>
        <section className={styles["wheelfinder"]}>
          <form className={styles["wheelfinder__selector"]}>
            {Object.keys(fullOptions).map((category, index) => {
              return (
                <CheckboxSection
                  key={index}
                  arrayName={String(category)}
                  checkedOptions={checkedOptions}
                  toggleOption={toggleOption}
                  optionsArray={fullOptions[category as keyof Options]}
                ></CheckboxSection>
              );
            })}
          </form>
          <div className={styles["wheelfinder__button_section"]}>
            <button
              type="reset"
              className={styles["wheelfinder__button"]}
              id="wheelfinder-clear"
              onClick={clearOptions}
            >
              reset selection
            </button>
            <button onClick={copyUrl} className={styles["wheelfinder__button"]}>
              share results
            </button>
          </div>
        </section>
        <Gallery
          loading={waitingForImages}
          images={images}
          galleryRef={galleryRef}
          handleImageClick={handleImageClick}
        ></Gallery>
      </main>
      <footer className={styles["footer"]}>
        <p className={styles["footer__credits"]} id="site-credits-button">
          site credits_
        </p>
        <Link
          className={styles["footer__credits"]}
          href="/"
          id="back-home-button"
        >
          back to 20vt.help_
        </Link>
      </footer>
      <SubmitModal
        activeModal={activeModal}
        closeModal={closeModal}
      ></SubmitModal>
      <PreviewModal
        activeModal={activeModal}
        closeModal={closeModal}
        data={clickedPhotoData}
      ></PreviewModal>
    </div>
  );
}
