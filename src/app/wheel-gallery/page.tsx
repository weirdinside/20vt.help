"use client";
import React, { useState, useEffect } from "react";
import Link from "next/link";
import styles from "./WheelGallery.module.css";
import { useRouter, useSearchParams } from "next/navigation";

import SubmitModal from '../_components/Wheel Gallery/SubmitModal/SubmitModal'

import CheckboxSection from "../_components/Wheel Gallery/CheckboxSection/CheckboxSection";

const wheelSizes = ['15"', '16"', '17"', '18"', '19"', '20"'];
const carTypes = [
  "UrS6 avant",
  "UrS6 sedan",
  "UrS4 sedan",
  "UrS4 avant",
  "T44 avant",
  "T44 sedan",
  "B3/B4 sedan",
  "B3/B4 coupe",
  "B3/B4 avant",
];
const wheelBrands = [
  "ABT",
  "Audi",
  "Avant Garde",
  "BBS",
  "Fifteen52",
  "Fikse",
  "HRE",
  "Mercedes",
  "Ronal",
  "OZ",
];

// wheelBrands needs to be generated by a GET request from the server.
// if table category for brand has 2 or more items listed below it, it should be added to array.

interface Options {
  wheelSizes: string[];
  wheelBrands: string[];
  carTypes: string[];
}

export default function WheelGallery() {
  // ---------------------------------------- //
  //            VARIABLE DECLARATION          //
  // ---------------------------------------- //
  const searchParams = useSearchParams();
  const router = useRouter();
  const [activeModal, setActiveModal] = useState('');
  const fullOptions = {carTypes: carTypes, wheelSizes: wheelSizes, wheelBrands: wheelBrands};

  const [checkedOptions, setCheckedOptions] = useState<Options>({
    carTypes: [],
    wheelSizes: [],
    wheelBrands: [],
  });

  // ---------------------------------------- //
  //               EVENT HANDLERS             //
  // ---------------------------------------- //

  function closeModal(){
    setActiveModal('')
  }

  function copyUrl() {
    const url = window.location.href;
    navigator.clipboard
      .writeText(url)
      .then(() => {
        alert("url copied to clipboard!");
      })
      .catch((err) => {
        console.error("failed to copy: ", err);
      });
  } 

  function clearOptions() {
    setCheckedOptions({carTypes: [], wheelSizes: [], wheelBrands: [], });
  }

  async function toggleOption(category: keyof Options, value: string) {
    setCheckedOptions((previousOptions) => {
      const categoryOptions = previousOptions[category];
      const updatedCategoryOptions = categoryOptions.includes(value)
        ? categoryOptions.filter((option) => option !== value)
        : [...categoryOptions, value];
      return {
        ...previousOptions,
        [category]: updatedCategoryOptions,
      };
    });
  }

  // ---------------------------------------- //
  //                   HOOKS                  //
  // ---------------------------------------- //

  useEffect(function setQueryOnChange(){
    const queryParameters = Object.entries(checkedOptions)
      .map(([category, values]) => {
        const queryString = values.join(',');
        return values.length > 0 ? `${category}=${queryString}` : '';
      })
      .filter(Boolean)
      .join('&');
    router.push(`?${queryParameters}`);
  }, [checkedOptions, router]);

  useEffect(function readQueryOnLoad(){
    const parsedOptions: Options = {
      carTypes: [],
      wheelSizes: [],
      wheelBrands: [],
    };
    searchParams.forEach((value, key) => {
      const valuesArray = value.split(',').filter(Boolean);
      if (key in parsedOptions) {
        parsedOptions[key as keyof Options] = valuesArray;
      }
    });
    setCheckedOptions(parsedOptions);
  }, []);

  // ---------------------------------------- //
  //             COMPONENT RETURN             //
  // ---------------------------------------- //

  return (
    <div className={styles["page"]}>
      <header className={styles["header"]}>
        <h1 className={styles["header__title"]}>wheel gallery.</h1>
        <div
          onClick={()=>{
            setActiveModal('submit')
          }}
          className={styles["header__submit-modal-trigger"]}
          id="submit-modal-trigger"
        >
          submit a wheel
        </div>
        <Link className={styles["header__logo"]} href="/">
          <div className={styles["logo__big-rhombus"]} id="big-rhombus"></div>
          <div
            className={styles["logo__small-rhombus-1"]}
            id="small-rhombus-1"
          ></div>
          <div
            className={styles["logo__small-rhombus-2"]}
            id="small-rhombus-2"
          ></div>
          <p className={styles["header__back"]}>back to 20vt.help</p>
        </Link>
      </header>
      <main className={styles["main"]}>
        <section className={styles["wheelfinder"]}>
          <form key='wheelfinder' className={styles["wheelfinder__selector"]}>
            {Object.keys(fullOptions).map((category)=>{
              return(
                <CheckboxSection
                arrayName={String(category)}
                checkedOptions={checkedOptions}
                toggleOption={toggleOption}
                optionsArray={fullOptions[category as keyof Options]}
                ></CheckboxSection>
              )
            })}
          </form>
          <div className={styles["wheelfinder__button_section"]}>
            <button
              type="reset"
              className={styles["wheelfinder__button"]}
              id="wheelfinder-clear"
              onClick={clearOptions}
            >
              reset selection
            </button>
            <button onClick={copyUrl} className={styles["wheelfinder__button"]}>
              share results
            </button>
          </div>
        </section>
        <section className={styles["gallery"]}>
          <ul id="gallery-grid" className={styles["gallery__grid"]}></ul>
        </section>
      </main>
      <footer className={styles["footer"]}>
        <p className={styles["footer__credits"]} id="site-credits-button">
          site credits_
        </p>
        <Link
          className={styles["footer__credits"]}
          href="/"
          id="back-home-button"
        >
          back to 20vt.help_
        </Link>
      </footer>
      <SubmitModal activeModal={activeModal} closeModal={closeModal}></SubmitModal>
    </div>
  );
}